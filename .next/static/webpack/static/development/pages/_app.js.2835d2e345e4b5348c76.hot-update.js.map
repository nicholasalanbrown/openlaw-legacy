{"version":3,"file":"static/webpack/static/development/pages/_app.js.2835d2e345e4b5348c76.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import App from 'next/app';\nimport Router from 'next/router';\nimport { Auth0Provider } from 'use-auth0-hooks';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { Header } from 'components';\nimport { withApollo } from '../utils';\n\nconst GlobalStyles = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Poppins:300,400,500,600&display=swap');\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  input, textarea {\n    border: 1px solid #ccc;\n    outline: none;\n  }\n\n  a {\n    color: #0366d6;\n    font-weight: 600;\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\n/**\n * Where to send the user after they have signed in.\n */\nconst onRedirectCallback = (appState) => {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query,\n    });\n  }\n};\n\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\nconst onAccessTokenError = (err, options) => {\n  console.error('Failed to retrieve access token: ', err);\n};\n\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\nconst onLoginError = (err) => {\n  Router.push({\n    pathname: '/oops',\n    query: {\n      message: err.error_description || err.message,\n    },\n  });\n};\n\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\nconst onRedirecting = () => (\n  <div>\n    <h1>Signing you in</h1>\n    <p>\n      In order to access this page you will need to sign in. Please wait while\n      we redirect you to the login page...\n    </p>\n  </div>\n);\n\n/**\n * Create a page which wraps the Auth0 provider.\n */\nclass Root extends App {\n  render() {\n    const { Component, pageProps, apollo } = this.props;\n\n    return (\n      <ApolloProvider client={apollo}>\n        <GlobalStyles />\n        <Auth0Provider\n          domain={process.env.AUTH0_DOMAIN}\n          clientId={process.env.AUTH0_CLIENT_ID}\n          redirectUri={process.env.REDIRECT_URI}\n          onLoginError={onLoginError}\n          onAccessTokenError={onAccessTokenError}\n          onRedirecting={onRedirecting}\n          onRedirectCallback={onRedirectCallback}\n        >\n          <Header />\n          <Component {...pageProps} />\n        </Auth0Provider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withApollo(Root);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAgCA;;;;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;;;;;;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAUA;;;;;AAGA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AArBA;AACA;AAuBA;;;;A","sourceRoot":""}