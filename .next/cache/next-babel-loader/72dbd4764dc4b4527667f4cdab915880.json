{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/components/ProposalPage.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport MeactMarkdown from \"react-markdown\";\nimport { useRouter } from \"next/router\";\nimport { withAuth, withLoginRequired } from \"use-auth0-hooks\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport MainLayout from \"../layouts/MainLayout\";\nimport { ContentContainer, ProposalHeader } from \"./\";\nimport { PROPOSAL_BY_SLUG_QUERY } from \"../queries\";\nimport ReactMarkdown from \"react-markdown\";\n\nfunction Proposal(_ref) {\n  var auth = _ref.auth,\n      query = _ref.query;\n\n  var _useQuery = useQuery(PROPOSAL_BY_SLUG_QUERY, {\n    variables: {\n      slug: query.proposal,\n      branchName: query.branch\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  if (error) {\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Error: \", _JSON$stringify(error));\n  }\n\n  var router = useRouter();\n\n  var handleBranchSelect = function handleBranchSelect(selectedBranch) {\n    if (selectedBranch !== query.branch) {\n      if (selectedBranch !== \"master\") {\n        router.push(\"/p/\".concat(query.proposal, \"/branch/\").concat(selectedBranch));\n      } else {\n        router.push(\"/p/\".concat(query.proposal));\n      }\n    }\n  };\n\n  return __jsx(MainLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(ContentContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(ProposalHeader, {\n    title: data.proposalBySlug.title,\n    description: data.proposalBySlug.description,\n    branches: data.proposalBySlug.branches,\n    onBranchSelect: handleBranchSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    onChange: function onChange(e) {\n      return handleBranchSelect(e);\n    },\n    defaultValue: query.branch || \"master\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, data.proposalBySlug.branches.map(function (branch) {\n    return __jsx(\"option\", {\n      key: branch,\n      value: branch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, branch);\n  })), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, data.proposalBySlug.title), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, data.proposalBySlug.description), __jsx(ReactMarkdown, {\n    source: data.proposalBySlug.summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(ReactMarkdown, {\n    source: data.proposalBySlug.legal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n}\n\nProposal.getInitialProps = function (_ref2) {\n  var query = _ref2.query;\n  return {\n    query: query\n  };\n};\n\nexport default Proposal;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/components/ProposalPage.js"],"names":["fetch","styled","MeactMarkdown","useRouter","withAuth","withLoginRequired","useQuery","MainLayout","ContentContainer","ProposalHeader","PROPOSAL_BY_SLUG_QUERY","ReactMarkdown","Proposal","auth","query","variables","slug","proposal","branchName","branch","loading","error","data","router","handleBranchSelect","selectedBranch","push","proposalBySlug","title","description","branches","e","map","summary","legal","getInitialProps"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,iBAA5C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;SACSC,gB,EAAkBC,c;AAC3B,SAASC,sBAAT,QAAuC,YAAvC;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;AAEA,SAASC,QAAT,OAAmC;AAAA,MAAfC,IAAe,QAAfA,IAAe;AAAA,MAATC,KAAS,QAATA,KAAS;;AAAA,kBACAR,QAAQ,CAACI,sBAAD,EAAyB;AAChEK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAEF,KAAK,CAACG,QAAd;AAAwBC,MAAAA,UAAU,EAAEJ,KAAK,CAACK;AAA1C;AADqD,GAAzB,CADR;AAAA,MACzBC,OADyB,aACzBA,OADyB;AAAA,MAChBC,KADgB,aAChBA,KADgB;AAAA,MACTC,IADS,aACTA,IADS;;AAKjC,MAAIF,OAAJ,EAAa;AACX,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,MAAIC,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,gBAAeA,KAAf,CAAX,CAAP;AACD;;AAED,MAAME,MAAM,GAAGpB,SAAS,EAAxB;;AAEA,MAAMqB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,cAAc,EAAI;AAC3C,QAAIA,cAAc,KAAKX,KAAK,CAACK,MAA7B,EAAqC;AACnC,UAAIM,cAAc,KAAK,QAAvB,EAAiC;AAC/BF,QAAAA,MAAM,CAACG,IAAP,cAAkBZ,KAAK,CAACG,QAAxB,qBAA2CQ,cAA3C;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,CAACG,IAAP,cAAkBZ,KAAK,CAACG,QAAxB;AACD;AACF;AACF,GARD;;AAUA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AACE,IAAA,KAAK,EAAEK,IAAI,CAACK,cAAL,CAAoBC,KAD7B;AAEE,IAAA,WAAW,EAAEN,IAAI,CAACK,cAAL,CAAoBE,WAFnC;AAGE,IAAA,QAAQ,EAAEP,IAAI,CAACK,cAAL,CAAoBG,QAHhC;AAIE,IAAA,cAAc,EAAEN,kBAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE;AACE,IAAA,QAAQ,EAAE,kBAAAO,CAAC;AAAA,aAAIP,kBAAkB,CAACO,CAAD,CAAtB;AAAA,KADb;AAEE,IAAA,YAAY,EAAEjB,KAAK,CAACK,MAAN,IAAgB,QAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGG,IAAI,CAACK,cAAL,CAAoBG,QAApB,CAA6BE,GAA7B,CAAiC,UAAAb,MAAM;AAAA,WACtC;AAAQ,MAAA,GAAG,EAAEA,MAAb;AAAqB,MAAA,KAAK,EAAEA,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MADH,CADsC;AAAA,GAAvC,CAJH,CAPF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,IAAI,CAACK,cAAL,CAAoBC,KAAzB,CAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,IAAI,CAACK,cAAL,CAAoBE,WAAzB,CAlBF,EAmBE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEP,IAAI,CAACK,cAAL,CAAoBM,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EAoBE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEX,IAAI,CAACK,cAAL,CAAoBO,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF,CADF;AA0BD;;AAEDtB,QAAQ,CAACuB,eAAT,GAA2B,iBAAe;AAAA,MAAZrB,KAAY,SAAZA,KAAY;AACxC,SAAO;AAAEA,IAAAA,KAAK,EAALA;AAAF,GAAP;AACD,CAFD;;AAIA,eAAeF,QAAf","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport MeactMarkdown from \"react-markdown\";\nimport { useRouter } from \"next/router\";\nimport { withAuth, withLoginRequired } from \"use-auth0-hooks\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport MainLayout from \"../layouts/MainLayout\";\nimport { ContentContainer, ProposalHeader } from \"components\";\nimport { PROPOSAL_BY_SLUG_QUERY } from \"../queries\";\nimport ReactMarkdown from \"react-markdown\";\n\nfunction Proposal({ auth, query }) {\n  const { loading, error, data } = useQuery(PROPOSAL_BY_SLUG_QUERY, {\n    variables: { slug: query.proposal, branchName: query.branch }\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {JSON.stringify(error)}</p>;\n  }\n\n  const router = useRouter();\n\n  const handleBranchSelect = selectedBranch => {\n    if (selectedBranch !== query.branch) {\n      if (selectedBranch !== \"master\") {\n        router.push(`/p/${query.proposal}/branch/${selectedBranch}`);\n      } else {\n        router.push(`/p/${query.proposal}`);\n      }\n    }\n  };\n\n  return (\n    <MainLayout>\n      <ContentContainer>\n        <ProposalHeader\n          title={data.proposalBySlug.title}\n          description={data.proposalBySlug.description}\n          branches={data.proposalBySlug.branches}\n          onBranchSelect={handleBranchSelect}\n        />\n        <select\n          onChange={e => handleBranchSelect(e)}\n          defaultValue={query.branch || \"master\"}\n        >\n          {data.proposalBySlug.branches.map(branch => (\n            <option key={branch} value={branch}>\n              {branch}\n            </option>\n          ))}\n        </select>\n        <h1>{data.proposalBySlug.title}</h1>\n        <h2>{data.proposalBySlug.description}</h2>\n        <ReactMarkdown source={data.proposalBySlug.summary} />\n        <ReactMarkdown source={data.proposalBySlug.legal} />\n      </ContentContainer>\n    </MainLayout>\n  );\n}\n\nProposal.getInitialProps = ({ query }) => {\n  return { query };\n};\n\nexport default Proposal;\n"]},"metadata":{},"sourceType":"module"}