{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from \"isomorphic-unfetch\";\nexport var getProposalContent = function getProposalContent(gitlabProjectId) {\n  var refName,\n      res,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getProposalContent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          refName = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"master\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/content%2Emd/raw?ref=\").concat(refName)).then(function (response) {\n            return console.log(response.text());\n          }));\n\n        case 3:\n          res = _context.sent;\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/queries/index.js"],"names":["fetch","getProposalContent","gitlabProjectId","refName","process","env","GITLAB_BASE_URL","then","response","console","log","text","res"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,eADgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhCC,UAAAA,OAFgC,2DAEtB,QAFsB;AAAA;AAAA,2CAIdH,KAAK,WAClBI,OAAO,CAACC,GAAR,CAAYC,eADM,uBACsBJ,eADtB,oDAC+EC,OAD/E,EAAL,CAEhBI,IAFgB,CAEX,UAAAC,QAAQ;AAAA,mBAAIC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAAT,EAAZ,CAAJ;AAAA,WAFG,CAJc;;AAAA;AAI1BC,UAAAA,GAJ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B","sourcesContent":["import fetch from \"isomorphic-unfetch\";\n\nexport const getProposalContent = async (\n  gitlabProjectId,\n  refName = \"master\"\n) => {\n  const res = await fetch(\n    `${process.env.GITLAB_BASE_URL}/projects/${gitlabProjectId}/repository/files/content%2Emd/raw?ref=${refName}`\n  ).then(response => console.log(response.text()));\n};\n"]},"metadata":{},"sourceType":"module"}