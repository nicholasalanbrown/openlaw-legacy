{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from \"isomorphic-unfetch\";\nexport var getProposals = function getProposals() {\n  var res;\n  return _regeneratorRuntime.async(function getProposals$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects\")).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 2:\n          res = _context.sent;\n          return _context.abrupt(\"return\", res);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var getProposalMetadata = function getProposalMetadata(gitlabProjectId) {\n  var refName,\n      res,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function getProposalMetadata$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          refName = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : \"master\";\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/metadata%2Ejson/raw?ref=\").concat(refName)).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context2.sent;\n          return _context2.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\nexport var getProposalSummary = function getProposalSummary(gitlabProjectId) {\n  var refName,\n      res,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getProposalSummary$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          refName = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : \"master\";\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/summary%2Emd/raw?ref=\").concat(refName)).then(function (response) {\n            return response.text();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context3.sent;\n          return _context3.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\nexport var getProposalLegal = function getProposalLegal(gitlabProjectId) {\n  var refName,\n      res,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function getProposalLegal$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          refName = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : \"master\";\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/legal%2Emd/raw?ref=\").concat(refName)).then(function (response) {\n            return response.text();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context4.sent;\n          return _context4.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/queries/index.js"],"names":["fetch","getProposals","process","env","GITLAB_BASE_URL","then","response","json","data","res","getProposalMetadata","gitlabProjectId","refName","getProposalSummary","text","getProposalLegal"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACRD,KAAK,WAAIE,OAAO,CAACC,GAAR,CAAYC,eAAhB,eAAL,CACfC,IADe,CACV,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,WADE,EAEfF,IAFe,CAEV,UAAAG,IAAI;AAAA,mBAAIA,IAAJ;AAAA,WAFM,CADQ;;AAAA;AACpBC,UAAAA,GADoB;AAAA,2CAInBA,GAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAOP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,eADiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjCC,UAAAA,OAFiC,8DAEvB,QAFuB;AAAA;AAAA,2CAIfZ,KAAK,WAClBE,OAAO,CAACC,GAAR,CAAYC,eADM,uBACsBO,eADtB,uDACkFC,OADlF,EAAL,CAGfP,IAHe,CAGV,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,WAHE,EAIfF,IAJe,CAIV,UAAAG,IAAI;AAAA,mBAAIA,IAAJ;AAAA,WAJM,CAJe;;AAAA;AAI3BC,UAAAA,GAJ2B;AAAA,4CAS1BA,GAT0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;AAYP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCF,eADgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhCC,UAAAA,OAFgC,8DAEtB,QAFsB;AAAA;AAAA,2CAIdZ,KAAK,WAClBE,OAAO,CAACC,GAAR,CAAYC,eADM,uBACsBO,eADtB,oDAC+EC,OAD/E,EAAL,CAGfP,IAHe,CAGV,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACQ,IAAT,EAAJ;AAAA,WAHE,EAIfT,IAJe,CAIV,UAAAG,IAAI;AAAA,mBAAIA,IAAJ;AAAA,WAJM,CAJc;;AAAA;AAI1BC,UAAAA,GAJ0B;AAAA,4CASzBA,GATyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;AAYP,OAAO,IAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOJ,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwBC,UAAAA,OAAxB,8DAAkC,QAAlC;AAAA;AAAA,2CACZZ,KAAK,WAClBE,OAAO,CAACC,GAAR,CAAYC,eADM,uBACsBO,eADtB,kDAC6EC,OAD7E,EAAL,CAGfP,IAHe,CAGV,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACQ,IAAT,EAAJ;AAAA,WAHE,EAIfT,IAJe,CAIV,UAAAG,IAAI;AAAA,mBAAIA,IAAJ;AAAA,WAJM,CADY;;AAAA;AACxBC,UAAAA,GADwB;AAAA,4CAMvBA,GANuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import fetch from \"isomorphic-unfetch\";\n\nexport const getProposals = async () => {\n  const res = await fetch(`${process.env.GITLAB_BASE_URL}/projects`)\n    .then(response => response.json())\n    .then(data => data);\n  return res;\n};\n\nexport const getProposalMetadata = async (\n  gitlabProjectId,\n  refName = \"master\"\n) => {\n  const res = await fetch(\n    `${process.env.GITLAB_BASE_URL}/projects/${gitlabProjectId}/repository/files/metadata%2Ejson/raw?ref=${refName}`\n  )\n    .then(response => response.json())\n    .then(data => data);\n  return res;\n};\n\nexport const getProposalSummary = async (\n  gitlabProjectId,\n  refName = \"master\"\n) => {\n  const res = await fetch(\n    `${process.env.GITLAB_BASE_URL}/projects/${gitlabProjectId}/repository/files/summary%2Emd/raw?ref=${refName}`\n  )\n    .then(response => response.text())\n    .then(data => data);\n  return res;\n};\n\nexport const getProposalLegal = async (gitlabProjectId, refName = \"master\") => {\n  const res = await fetch(\n    `${process.env.GITLAB_BASE_URL}/projects/${gitlabProjectId}/repository/files/legal%2Emd/raw?ref=${refName}`\n  )\n    .then(response => response.text())\n    .then(data => data);\n  return res;\n};\n"]},"metadata":{},"sourceType":"module"}