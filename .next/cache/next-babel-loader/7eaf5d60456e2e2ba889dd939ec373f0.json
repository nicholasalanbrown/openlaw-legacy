{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/components/RIchTextEditor.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from \"react\";\nimport { createEditor, Node } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport styled from \"styled-components\";\nconst StyledEditable = styled(Editable).withConfig({\n  displayName: \"RIchTextEditor__StyledEditable\",\n  componentId: \"xyai8j-0\"\n})([\"border:1px solid #ccc;margin-top:30px;padding:12px 8px;&:placeholder{color:#757575;opacity:1 !important;}\"]);\n\nconst RichTextEditor = ({\n  placeholder,\n  onChange,\n  initialValue\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState([{\n    children: [{\n      text: initialValue\n    }]\n  }]);\n\n  const serialize = nodes => nodes.map(n => Node.string(n)).join(\"\\n\");\n\n  const handleChange = value => {\n    if (onChange) {\n      onChange(serialize(value));\n    }\n\n    setValue(value);\n  };\n\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => handleChange(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, __jsx(StyledEditable, {\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};\n\nexport default RichTextEditor;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/components/RIchTextEditor.js"],"names":["React","useState","useMemo","createEditor","Node","Slate","Editable","withReact","withHistory","styled","StyledEditable","RichTextEditor","placeholder","onChange","initialValue","value","setValue","children","text","serialize","nodes","map","n","string","join","handleChange","editor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,OAAnC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACH,QAAD,CAAT;AAAA;AAAA;AAAA,iHAApB;;AAUA,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAA6C;AAClE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAAC,CACjC;AACEgB,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAEJ;AADR,KADQ;AADZ,GADiC,CAAD,CAAlC;;AAUA,QAAMK,SAAS,GAAGC,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUC,CAAC,IAAIlB,IAAI,CAACmB,MAAL,CAAYD,CAAZ,CAAf,EAA+BE,IAA/B,CAAoC,IAApC,CAA3B;;AAEA,QAAMC,YAAY,GAAGV,KAAK,IAAI;AAC5B,QAAIF,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACM,SAAS,CAACJ,KAAD,CAAV,CAAR;AACD;;AACDC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GALD;;AAOA,QAAMW,MAAM,GAAGxB,OAAO,CAAC,MAAMM,WAAW,CAACD,SAAS,CAACJ,YAAY,EAAb,CAAV,CAAlB,EAA+C,EAA/C,CAAtB;AAEA,SACE,MAAC,KAAD;AACE,IAAA,MAAM,EAAEuB,MADV;AAEE,IAAA,KAAK,EAAEX,KAFT;AAGE,IAAA,QAAQ,EAAEA,KAAK,IAAIU,YAAY,CAACV,KAAD,CAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,cAAD;AAAgB,IAAA,WAAW,EAAEH,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CA/BD;;AAiCA,eAAeD,cAAf","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { createEditor, Node } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport styled from \"styled-components\";\n\nconst StyledEditable = styled(Editable)`\n  border: 1px solid #ccc;\n  margin-top: 30px;\n  padding: 12px 8px;\n  &:placeholder {\n    color: #757575;\n    opacity: 1 !important;\n  }\n`;\n\nconst RichTextEditor = ({ placeholder, onChange, initialValue }) => {\n  const [value, setValue] = useState([\n    {\n      children: [\n        {\n          text: initialValue\n        }\n      ]\n    }\n  ]);\n\n  const serialize = nodes => nodes.map(n => Node.string(n)).join(\"\\n\");\n\n  const handleChange = value => {\n    if (onChange) {\n      onChange(serialize(value));\n    }\n    setValue(value);\n  };\n\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={value => handleChange(value)}\n    >\n      <StyledEditable placeholder={placeholder} />\n    </Slate>\n  );\n};\n\nexport default RichTextEditor;\n"]},"metadata":{},"sourceType":"module"}