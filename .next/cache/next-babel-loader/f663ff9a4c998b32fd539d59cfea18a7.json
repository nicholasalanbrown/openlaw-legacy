{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport MainLayout from \"../layouts/MainLayout\";\nimport Link from \"next/link\";\nimport fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { ContentContainer } from \"../components\";\nimport { getProposals } from \"../queries\";\nconst PROPOSALS = gql`\n  {\n    proposals {\n      id\n      title\n    }\n  }\n`;\n\nfunction Index({\n  proposals\n}) {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(PROPOSALS);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, console.log(error));\n  console.log(data);\n  return __jsx(MainLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(ContentContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, proposals && proposals.map(proposal => __jsx(Link, {\n    key: proposal.id,\n    href: \"/proposal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, proposal.name)))));\n}\n\nIndex.getInitialProps = async function () {\n  const proposals = await getProposals();\n  return {\n    proposals\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/pages/index.js"],"names":["MainLayout","Link","fetch","styled","useQuery","gql","ContentContainer","getProposals","PROPOSALS","Index","proposals","loading","error","data","console","log","map","proposal","id","name","getInitialProps"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;SAESC,gB;AACT,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,SAAS,GAAGH,GAAI;;;;;;;CAAtB;;AASA,SAASI,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA8B;AAC5B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACI,SAAD,CAAzC;AAEA,MAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAAN,CAAP;AAEXE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,SAAS,IACRA,SAAS,CAACM,GAAV,CAAcC,QAAQ,IACpB,MAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,QAAQ,CAACC,EAApB;AAAwB,IAAA,IAAI,EAAC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,QAAQ,CAACE,IAAb,CADF,CADF,CAFJ,CADF,CADF;AAYD;;AAEDV,KAAK,CAACW,eAAN,GAAwB,kBAAiB;AACvC,QAAMV,SAAS,GAAG,MAAMH,YAAY,EAApC;AACA,SAAO;AAAEG,IAAAA;AAAF,GAAP;AACD,CAHD;;AAKA,eAAeD,KAAf","sourcesContent":["import MainLayout from \"../layouts/MainLayout\";\nimport Link from \"next/link\";\nimport fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport { useQuery, gql } from \"@apollo/client\";\n\nimport { ContentContainer } from \"components\";\nimport { getProposals } from \"../queries\";\n\nconst PROPOSALS = gql`\n  {\n    proposals {\n      id\n      title\n    }\n  }\n`;\n\nfunction Index({ proposals }) {\n  const { loading, error, data } = useQuery(PROPOSALS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <div>{console.log(error)}</div>;\n\n  console.log(data);\n\n  return (\n    <MainLayout>\n      <ContentContainer>\n        {proposals &&\n          proposals.map(proposal => (\n            <Link key={proposal.id} href=\"/proposal\">\n              <a>{proposal.name}</a>\n            </Link>\n          ))}\n      </ContentContainer>\n    </MainLayout>\n  );\n}\n\nIndex.getInitialProps = async function() {\n  const proposals = await getProposals();\n  return { proposals };\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}