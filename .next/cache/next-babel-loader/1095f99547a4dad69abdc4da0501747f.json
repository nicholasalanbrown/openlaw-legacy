{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/components/ProposalPage.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport MeactMarkdown from \"react-markdown\";\nimport { useRouter } from \"next/router\";\nimport MainLayout from \"../layouts/MainLayout\";\nimport { ContentContainer } from \"./\";\nimport { getProposalBranches, getProposalMetadata, getProposalSummary, getProposalLegal } from \"../queries\";\nimport ReactMarkdown from \"react-markdown\";\nconst Wrapper = styled.div.withConfig({\n  displayName: \"ProposalPage__Wrapper\",\n  componentId: \"sc-1xdfroq-0\"\n})([\"display:flex;flex-direction:column;align-items:center;\"]);\nconst Containter = styled.div.withConfig({\n  displayName: \"ProposalPage__Containter\",\n  componentId: \"sc-1xdfroq-1\"\n})([\"font-size:18px;line-height:1.4;max-width:900px;padding:60px 20px 0;\"]);\n\nfunction Proposal({\n  branches,\n  currentBranch,\n  metadata,\n  summary,\n  legal\n}) {\n  const router = useRouter();\n\n  const handleBranchSelect = e => {\n    const selectedBranch = e.target.value;\n\n    if (selectedBranch !== currentBranch) {\n      if (selectedBranch !== \"master\") {\n        router.push(`/hello/tree/${selectedBranch}`);\n      } else {\n        router.push(\"/hello\");\n      }\n    }\n  };\n\n  console.log(process.env);\n  return __jsx(MainLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(ContentContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"select\", {\n    onChange: e => handleBranchSelect(e),\n    defaultValue: currentBranch || \"master\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, branches.map(branch => __jsx(\"option\", {\n    key: branch.name,\n    value: branch.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, branch.name))), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, metadata.title), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, metadata.description), __jsx(ReactMarkdown, {\n    source: summary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), __jsx(ReactMarkdown, {\n    source: legal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n}\n\nProposal.getInitialProps = async function (context) {\n  const allBranches = await getProposalBranches(1);\n  const branches = allBranches.filter(branch => branch.merged === false);\n  const currentBranch = context.query.branch || \"master\";\n  const metadata = await getProposalMetadata(1, currentBranch);\n  const summary = await getProposalSummary(1, currentBranch);\n  const legal = await getProposalLegal(1, currentBranch);\n  return {\n    branches,\n    currentBranch,\n    metadata,\n    summary,\n    legal\n  };\n};\n\nexport default Proposal;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/components/ProposalPage.js"],"names":["fetch","styled","MeactMarkdown","useRouter","MainLayout","ContentContainer","getProposalBranches","getProposalMetadata","getProposalSummary","getProposalLegal","ReactMarkdown","Wrapper","div","Containter","Proposal","branches","currentBranch","metadata","summary","legal","router","handleBranchSelect","e","selectedBranch","target","value","push","console","log","process","env","map","branch","name","title","description","getInitialProps","context","allBranches","filter","merged","query"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport styled from \"styled-components\";\nimport MeactMarkdown from \"react-markdown\";\nimport { useRouter } from \"next/router\";\n\nimport MainLayout from \"../layouts/MainLayout\";\nimport { ContentContainer } from \"components\";\nimport {\n  getProposalBranches,\n  getProposalMetadata,\n  getProposalSummary,\n  getProposalLegal\n} from \"../queries\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Containter = styled.div`\n  font-size: 18px;\n  line-height: 1.4;\n  max-width: 900px;\n  padding: 60px 20px 0;\n`;\n\nfunction Proposal({ branches, currentBranch, metadata, summary, legal }) {\n  const router = useRouter();\n\n  const handleBranchSelect = e => {\n    const selectedBranch = e.target.value;\n    if (selectedBranch !== currentBranch) {\n      if (selectedBranch !== \"master\") {\n        router.push(`/hello/tree/${selectedBranch}`);\n      } else {\n        router.push(\"/hello\");\n      }\n    }\n  };\n\n  console.log(process.env);\n\n  return (\n    <MainLayout>\n      <ContentContainer>\n        <select\n          onChange={e => handleBranchSelect(e)}\n          defaultValue={currentBranch || \"master\"}\n        >\n          {branches.map(branch => (\n            <option key={branch.name} value={branch.name}>\n              {branch.name}\n            </option>\n          ))}\n        </select>\n        <h1>{metadata.title}</h1>\n        <h2>{metadata.description}</h2>\n        <ReactMarkdown source={summary} />\n        <ReactMarkdown source={legal} />\n      </ContentContainer>\n    </MainLayout>\n  );\n}\n\nProposal.getInitialProps = async function(context) {\n  const allBranches = await getProposalBranches(1);\n  const branches = allBranches.filter(branch => branch.merged === false);\n  const currentBranch = context.query.branch || \"master\";\n  const metadata = await getProposalMetadata(1, currentBranch);\n  const summary = await getProposalSummary(1, currentBranch);\n  const legal = await getProposalLegal(1, currentBranch);\n  return { branches, currentBranch, metadata, summary, legal };\n};\n\nexport default Proposal;\n"]},"metadata":{},"sourceType":"module"}