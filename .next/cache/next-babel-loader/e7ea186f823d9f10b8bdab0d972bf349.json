{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Router from \"next/router\";\nimport { Auth0Provider, useAuth } from \"use-auth0-hooks\";\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from \"@apollo/client\";\nvar client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: process.env.API_URI\n  })\n});\n/**\n * Where to send the user after they have signed in.\n */\n\nvar onRedirectCallback = function onRedirectCallback(appState) {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query\n    });\n  }\n};\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\n\n\nvar onAccessTokenError = function onAccessTokenError(err, options) {\n  console.error(\"Failed to retrieve access token: \", err);\n};\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\n\n\nvar onLoginError = function onLoginError(err) {\n  Router.push({\n    pathname: \"/oops\",\n    query: {\n      message: err.error_description || err.message\n    }\n  });\n};\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\n\n\nvar onRedirecting = function onRedirecting() {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Signing you in\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"In order to access this page you will need to sign in. Please wait while we redirect you to the login page...\"));\n};\n/**\n * Create a page which wraps the Auth0 provider.\n */\n\n\nvar Root =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(Root, _App);\n\n  function Root() {\n    _classCallCheck(this, Root);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Root).apply(this, arguments));\n  }\n\n  _createClass(Root, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      return __jsx(ApolloProvider, {\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, __jsx(Auth0Provider, {\n        domain: process.env.AUTH0_DOMAIN,\n        client_id: process.env.AUTH0_CLIENT_ID,\n        redirect_uri: window.location.origin,\n        onRedirectCallback: onRedirectCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, __jsx(Component, _extends({}, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Root;\n}(App);\n\nexport { Root as default };","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/pages/_app.js"],"names":["App","Router","Auth0Provider","useAuth","ApolloClient","ApolloProvider","HttpLink","InMemoryCache","client","cache","link","uri","process","env","API_URI","onRedirectCallback","appState","returnTo","push","pathname","query","onAccessTokenError","err","options","console","error","onLoginError","message","error_description","onRedirecting","Root","props","Component","pageProps","AUTH0_DOMAIN","AUTH0_CLIENT_ID","window","location","origin"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,iBAAvC;AACA,SACEC,YADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,aAJF,QAKO,gBALP;AAOA,IAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,KAAK,EAAE,IAAIF,aAAJ,EADuB;AAE9BG,EAAAA,IAAI,EAAE,IAAIJ,QAAJ,CAAa;AACjBK,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADA,GAAb;AAFwB,CAAjB,CAAf;AAOA;;;;AAGA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,QAAzB,EAAmC;AACjChB,IAAAA,MAAM,CAACiB,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAEH,QAAQ,CAACC,QAAT,CAAkBE,QADlB;AAEVC,MAAAA,KAAK,EAAEJ,QAAQ,CAACC,QAAT,CAAkBG;AAFf,KAAZ;AAID;AACF,CAPD;AASA;;;;;;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAC3CC,EAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDH,GAAnD;AACD,CAFD;AAIA;;;;;;AAIA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAAAJ,GAAG,EAAI;AAC1BrB,EAAAA,MAAM,CAACiB,IAAP,CAAY;AACVC,IAAAA,QAAQ,EAAE,OADA;AAEVC,IAAAA,KAAK,EAAE;AACLO,MAAAA,OAAO,EAAEL,GAAG,CAACM,iBAAJ,IAAyBN,GAAG,CAACK;AADjC;AAFG,GAAZ;AAMD,CAPD;AASA;;;;;;AAIA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAFF,CADF;AASD,CAVD;AAYA;;;;;IAGqBC,I;;;;;;;;;;;;;6BACV;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAGP,aACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAEzB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,aAAD;AACE,QAAA,MAAM,EAAEI,OAAO,CAACC,GAAR,CAAYqB,YADtB;AAEE,QAAA,SAAS,EAAEtB,OAAO,CAACC,GAAR,CAAYsB,eAFzB;AAGE,QAAA,YAAY,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAHhC;AAIE,QAAA,kBAAkB,EAAEvB,kBAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,MAAC,SAAD,eAAekB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANF,CADF,CADF;AAYD;;;;EAhB+BjC,G;;SAAb8B,I","sourcesContent":["import App from \"next/app\";\nimport Router from \"next/router\";\nimport { Auth0Provider, useAuth } from \"use-auth0-hooks\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  HttpLink,\n  InMemoryCache\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: process.env.API_URI\n  })\n});\n\n/**\n * Where to send the user after they have signed in.\n */\nconst onRedirectCallback = appState => {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query\n    });\n  }\n};\n\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\nconst onAccessTokenError = (err, options) => {\n  console.error(\"Failed to retrieve access token: \", err);\n};\n\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\nconst onLoginError = err => {\n  Router.push({\n    pathname: \"/oops\",\n    query: {\n      message: err.error_description || err.message\n    }\n  });\n};\n\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\nconst onRedirecting = () => {\n  return (\n    <div>\n      <h1>Signing you in</h1>\n      <p>\n        In order to access this page you will need to sign in. Please wait while\n        we redirect you to the login page...\n      </p>\n    </div>\n  );\n};\n\n/**\n * Create a page which wraps the Auth0 provider.\n */\nexport default class Root extends App {\n  render() {\n    const { Component, pageProps } = this.props;\n\n    return (\n      <ApolloProvider client={client}>\n        <Auth0Provider\n          domain={process.env.AUTH0_DOMAIN}\n          client_id={process.env.AUTH0_CLIENT_ID}\n          redirect_uri={window.location.origin}\n          onRedirectCallback={onRedirectCallback}\n        >\n          <Component {...pageProps} />\n        </Auth0Provider>\n      </ApolloProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}