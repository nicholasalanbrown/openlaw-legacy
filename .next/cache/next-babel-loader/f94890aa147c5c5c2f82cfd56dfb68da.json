{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Router from \"next/router\";\nimport { Auth0Provider } from \"use-auth0-hooks\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createGlobalStyle } from \"styled-components\";\nimport { withApollo } from \"../utils\";\nconst GlobalStyles = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600&display=swap');\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  input, textarea {\n    border: 1px solid #ccc;\n    outline: none;\n  }\n\n  a {\n    color: #0366d6;\n    font-weight: 600;\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n/**\n * Where to send the user after they have signed in.\n */\n\nconst onRedirectCallback = appState => {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query\n    });\n  }\n};\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\n\n\nconst onAccessTokenError = (err, options) => {\n  console.error(\"Failed to retrieve access token: \", err);\n};\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\n\n\nconst onLoginError = err => {\n  Router.push({\n    pathname: \"/oops\",\n    query: {\n      message: err.error_description || err.message\n    }\n  });\n};\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\n\n\nconst onRedirecting = () => {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Signing you in\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"In order to access this page you will need to sign in. Please wait while we redirect you to the login page...\"));\n};\n/**\n * Create a page which wraps the Auth0 provider.\n */\n\n\nclass Root extends App {\n  render() {\n    const {\n      Component,\n      pageProps,\n      apollo\n    } = this.props;\n    return __jsx(ApolloProvider, {\n      client: apollo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, __jsx(GlobalStyles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), __jsx(Auth0Provider, {\n      domain: process.env.AUTH0_DOMAIN,\n      clientId: process.env.AUTH0_CLIENT_ID,\n      redirectUri: process.env.REDIRECT_URI,\n      onLoginError: onLoginError,\n      onAccessTokenError: onAccessTokenError,\n      onRedirecting: onRedirecting,\n      onRedirectCallback: onRedirectCallback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default withApollo(Root);","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/pages/_app.js"],"names":["App","Router","Auth0Provider","ApolloProvider","createGlobalStyle","withApollo","GlobalStyles","onRedirectCallback","appState","returnTo","push","pathname","query","onAccessTokenError","err","options","console","error","onLoginError","message","error_description","onRedirecting","Root","render","Component","pageProps","apollo","props","process","env","AUTH0_DOMAIN","AUTH0_CLIENT_ID","REDIRECT_URI"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,SAASC,UAAT,QAA2B,UAA3B;AAEA,MAAMC,YAAY,GAAGF,iBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAvC;AAgCA;;;;AAGA,MAAMG,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,QAAzB,EAAmC;AACjCR,IAAAA,MAAM,CAACS,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAEH,QAAQ,CAACC,QAAT,CAAkBE,QADlB;AAEVC,MAAAA,KAAK,EAAEJ,QAAQ,CAACC,QAAT,CAAkBG;AAFf,KAAZ;AAID;AACF,CAPD;AASA;;;;;;;AAKA,MAAMC,kBAAkB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC3CC,EAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDH,GAAnD;AACD,CAFD;AAIA;;;;;;AAIA,MAAMI,YAAY,GAAGJ,GAAG,IAAI;AAC1Bb,EAAAA,MAAM,CAACS,IAAP,CAAY;AACVC,IAAAA,QAAQ,EAAE,OADA;AAEVC,IAAAA,KAAK,EAAE;AACLO,MAAAA,OAAO,EAAEL,GAAG,CAACM,iBAAJ,IAAyBN,GAAG,CAACK;AADjC;AAFG,GAAZ;AAMD,CAPD;AASA;;;;;;AAIA,MAAME,aAAa,GAAG,MAAM;AAC1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAFF,CADF;AASD,CAVD;AAYA;;;;;AAGA,MAAMC,IAAN,SAAmBtB,GAAnB,CAAuB;AACrBuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAmC,KAAKC,KAA9C;AAEA,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,aAAD;AACE,MAAA,MAAM,EAAEE,OAAO,CAACC,GAAR,CAAYC,YADtB;AAEE,MAAA,QAAQ,EAAEF,OAAO,CAACC,GAAR,CAAYE,eAFxB;AAGE,MAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,YAH3B;AAIE,MAAA,YAAY,EAAEd,YAJhB;AAKE,MAAA,kBAAkB,EAAEL,kBALtB;AAME,MAAA,aAAa,EAAEQ,aANjB;AAOE,MAAA,kBAAkB,EAAEd,kBAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE,MAAC,SAAD,eAAekB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATF,CAFF,CADF;AAgBD;;AApBoB;;AAuBvB,eAAepB,UAAU,CAACiB,IAAD,CAAzB","sourcesContent":["import App from \"next/app\";\nimport Router from \"next/router\";\nimport { Auth0Provider } from \"use-auth0-hooks\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { createGlobalStyle } from \"styled-components\";\n\nimport { withApollo } from \"../utils\";\n\nconst GlobalStyles = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Poppins:400,500,600&display=swap');\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  input, textarea {\n    border: 1px solid #ccc;\n    outline: none;\n  }\n\n  a {\n    color: #0366d6;\n    font-weight: 600;\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\n/**\n * Where to send the user after they have signed in.\n */\nconst onRedirectCallback = appState => {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query\n    });\n  }\n};\n\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\nconst onAccessTokenError = (err, options) => {\n  console.error(\"Failed to retrieve access token: \", err);\n};\n\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\nconst onLoginError = err => {\n  Router.push({\n    pathname: \"/oops\",\n    query: {\n      message: err.error_description || err.message\n    }\n  });\n};\n\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\nconst onRedirecting = () => {\n  return (\n    <div>\n      <h1>Signing you in</h1>\n      <p>\n        In order to access this page you will need to sign in. Please wait while\n        we redirect you to the login page...\n      </p>\n    </div>\n  );\n};\n\n/**\n * Create a page which wraps the Auth0 provider.\n */\nclass Root extends App {\n  render() {\n    const { Component, pageProps, apollo } = this.props;\n\n    return (\n      <ApolloProvider client={apollo}>\n        <GlobalStyles />\n        <Auth0Provider\n          domain={process.env.AUTH0_DOMAIN}\n          clientId={process.env.AUTH0_CLIENT_ID}\n          redirectUri={process.env.REDIRECT_URI}\n          onLoginError={onLoginError}\n          onAccessTokenError={onAccessTokenError}\n          onRedirecting={onRedirecting}\n          onRedirectCallback={onRedirectCallback}\n        >\n          <Component {...pageProps} />\n        </Auth0Provider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withApollo(Root);\n"]},"metadata":{},"sourceType":"module"}