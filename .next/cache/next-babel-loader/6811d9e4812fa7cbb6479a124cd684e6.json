{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\n  @import url('https://fonts.googleapis.com/css?family=Poppins:300,400,500,600&display=swap');\\n\\n  html, body {\\n    margin: 0;\\n    padding: 0;\\n  }\\n\\n  body {\\n    font-family: 'Poppins', sans-serif;\\n  }\\n\\n  * {\\n    box-sizing: border-box;\\n  }\\n\\n  input, textarea {\\n    border: 1px solid #ccc;\\n    outline: none;\\n  }\\n\\n  a {\\n    color: #0366d6;\\n    font-weight: 600;\\n    text-decoration: none;\\n    &:hover {\\n      text-decoration: underline;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport App from 'next/app';\nimport Router from 'next/router';\nimport { Auth0Provider } from 'use-auth0-hooks';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { createGlobalStyle } from 'styled-components';\nimport { Header } from \"../components\";\nimport { withApollo } from '../utils';\nvar GlobalStyles = createGlobalStyle(_templateObject());\n/**\n * Where to send the user after they have signed in.\n */\n\nvar onRedirectCallback = function onRedirectCallback(appState) {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query\n    });\n  }\n};\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\n\n\nvar onAccessTokenError = function onAccessTokenError(err, options) {\n  console.error('Failed to retrieve access token: ', err);\n};\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\n\n\nvar onLoginError = function onLoginError(err) {\n  Router.push({\n    pathname: '/oops',\n    query: {\n      message: err.error_description || err.message\n    }\n  });\n};\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\n\n\nvar onRedirecting = function onRedirecting() {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Signing you in\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"In order to access this page you will need to sign in. Please wait while we redirect you to the login page...\"));\n};\n/**\n * Create a page which wraps the Auth0 provider.\n */\n\n\nvar Root =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(Root, _App);\n\n  function Root() {\n    _classCallCheck(this, Root);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Root).apply(this, arguments));\n  }\n\n  _createClass(Root, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          apollo = _this$props.apollo;\n      return __jsx(ApolloProvider, {\n        client: apollo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(GlobalStyles, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), __jsx(Auth0Provider, {\n        domain: process.env.AUTH0_DOMAIN,\n        clientId: process.env.AUTH0_CLIENT_ID,\n        redirectUri: process.env.REDIRECT_URI,\n        onLoginError: onLoginError,\n        onAccessTokenError: onAccessTokenError,\n        onRedirecting: onRedirecting,\n        onRedirectCallback: onRedirectCallback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, __jsx(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), __jsx(Component, _extends({}, pageProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Root;\n}(App);\n\nexport default withApollo(Root);","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/pages/_app.js"],"names":["React","App","Router","Auth0Provider","ApolloProvider","createGlobalStyle","Header","withApollo","GlobalStyles","onRedirectCallback","appState","returnTo","push","pathname","query","onAccessTokenError","err","options","console","error","onLoginError","message","error_description","onRedirecting","Root","props","Component","pageProps","apollo","process","env","AUTH0_DOMAIN","AUTH0_CLIENT_ID","REDIRECT_URI"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;SAESC,M;AACT,SAASC,UAAT,QAA2B,UAA3B;AAEA,IAAMC,YAAY,GAAGH,iBAAH,mBAAlB;AAgCA;;;;AAGA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,QAAzB,EAAmC;AACjCT,IAAAA,MAAM,CAACU,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAEH,QAAQ,CAACC,QAAT,CAAkBE,QADlB;AAEVC,MAAAA,KAAK,EAAEJ,QAAQ,CAACC,QAAT,CAAkBG;AAFf,KAAZ;AAID;AACF,CAPD;AASA;;;;;;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD,EAAMC,OAAN,EAAkB;AAC3CC,EAAAA,OAAO,CAACC,KAAR,CAAc,mCAAd,EAAmDH,GAAnD;AACD,CAFD;AAIA;;;;;;AAIA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACJ,GAAD,EAAS;AAC5Bd,EAAAA,MAAM,CAACU,IAAP,CAAY;AACVC,IAAAA,QAAQ,EAAE,OADA;AAEVC,IAAAA,KAAK,EAAE;AACLO,MAAAA,OAAO,EAAEL,GAAG,CAACM,iBAAJ,IAAyBN,GAAG,CAACK;AADjC;AAFG,GAAZ;AAMD,CAPD;AASA;;;;;;AAIA,IAAME,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHAFF,CADoB;AAAA,CAAtB;AAUA;;;;;IAGMC,I;;;;;;;;;;;;;6BACK;AAAA,wBACkC,KAAKC,KADvC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,MADvB,eACuBA,MADvB;AAGP,aACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,aAAD;AACE,QAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,YADtB;AAEE,QAAA,QAAQ,EAAEF,OAAO,CAACC,GAAR,CAAYE,eAFxB;AAGE,QAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,YAH3B;AAIE,QAAA,YAAY,EAAEb,YAJhB;AAKE,QAAA,kBAAkB,EAAEL,kBALtB;AAME,QAAA,aAAa,EAAEQ,aANjB;AAOE,QAAA,kBAAkB,EAAEd,kBAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAUE,MAAC,SAAD,eAAekB,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAVF,CAFF,CADF;AAiBD;;;;EArBgB1B,G;;AAwBnB,eAAeM,UAAU,CAACiB,IAAD,CAAzB","sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport Router from 'next/router';\nimport { Auth0Provider } from 'use-auth0-hooks';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { createGlobalStyle } from 'styled-components';\n\nimport { Header } from 'components';\nimport { withApollo } from '../utils';\n\nconst GlobalStyles = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Poppins:300,400,500,600&display=swap');\n\n  html, body {\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: 'Poppins', sans-serif;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  input, textarea {\n    border: 1px solid #ccc;\n    outline: none;\n  }\n\n  a {\n    color: #0366d6;\n    font-weight: 600;\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\n/**\n * Where to send the user after they have signed in.\n */\nconst onRedirectCallback = (appState) => {\n  if (appState && appState.returnTo) {\n    Router.push({\n      pathname: appState.returnTo.pathname,\n      query: appState.returnTo.query,\n    });\n  }\n};\n\n/**\n * When it hasn't been possible to retrieve a new access token.\n * @param {Error} err\n * @param {AccessTokenRequestOptions} options\n */\nconst onAccessTokenError = (err, options) => {\n  console.error('Failed to retrieve access token: ', err);\n};\n\n/**\n * When signing in fails for some reason, we want to show it here.\n * @param {Error} err\n */\nconst onLoginError = (err) => {\n  Router.push({\n    pathname: '/oops',\n    query: {\n      message: err.error_description || err.message,\n    },\n  });\n};\n\n/**\n * When redirecting to the login page you'll end up in this state where the login page is still loading.\n * You can render a message to show that the user is being redirected.\n */\nconst onRedirecting = () => (\n  <div>\n    <h1>Signing you in</h1>\n    <p>\n      In order to access this page you will need to sign in. Please wait while\n      we redirect you to the login page...\n    </p>\n  </div>\n);\n\n/**\n * Create a page which wraps the Auth0 provider.\n */\nclass Root extends App {\n  render() {\n    const { Component, pageProps, apollo } = this.props;\n\n    return (\n      <ApolloProvider client={apollo}>\n        <GlobalStyles />\n        <Auth0Provider\n          domain={process.env.AUTH0_DOMAIN}\n          clientId={process.env.AUTH0_CLIENT_ID}\n          redirectUri={process.env.REDIRECT_URI}\n          onLoginError={onLoginError}\n          onAccessTokenError={onAccessTokenError}\n          onRedirecting={onRedirecting}\n          onRedirectCallback={onRedirectCallback}\n        >\n          <Header />\n          <Component {...pageProps} />\n        </Auth0Provider>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default withApollo(Root);\n"]},"metadata":{},"sourceType":"module"}