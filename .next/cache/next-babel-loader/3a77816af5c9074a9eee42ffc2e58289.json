{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/components/RichTextEditor.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from \"react\";\nimport { createEditor, Node } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport styled from \"styled-components\";\nconst StyledEditable = styled(Editable).withConfig({\n  displayName: \"RichTextEditor__StyledEditable\",\n  componentId: \"qlh8hx-0\"\n})([\"border:1px solid #ccc;margin-top:30px;padding:12px 8px;&:placeholder{color:#757575;opacity:1 !important;}\"]);\n\nconst RichTextEditor = ({\n  placeholder\n}) => {\n  const {\n    0: value,\n    1: setValue\n  } = useState([{\n    children: [{\n      text: \"\"\n    }]\n  }]);\n\n  const serialize = nodes => {\n    return nodes.map(n => Node.string(n)).join(\"\\n\");\n  };\n\n  const handleChange = value => {\n    if (this.props.onChange) {\n      this.props.onChange(serialize(value));\n    }\n\n    setValue(value);\n  };\n\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => handleChange(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, __jsx(StyledEditable, {\n    placeholder: placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n};\n\nconst initialValue = [{\n  children: [{\n    text: \"This is editable plain text, just like a <textarea>!\"\n  }]\n}];\nexport default RichTextEditor;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/components/RichTextEditor.js"],"names":["React","useState","useMemo","createEditor","Node","Slate","Editable","withReact","withHistory","styled","StyledEditable","RichTextEditor","placeholder","value","setValue","children","text","serialize","nodes","map","n","string","join","handleChange","props","onChange","editor","initialValue"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,YAAT,EAAuBC,IAAvB,QAAmC,OAAnC;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,cAAc,GAAGD,MAAM,CAACH,QAAD,CAAT;AAAA;AAAA;AAAA,iHAApB;;AAUA,MAAMK,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAC1C,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAAC,CACjC;AACEc,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE;AADR,KADQ;AADZ,GADiC,CAAD,CAAlC;;AAUA,QAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,WAAOA,KAAK,CAACC,GAAN,CAAUC,CAAC,IAAIhB,IAAI,CAACiB,MAAL,CAAYD,CAAZ,CAAf,EAA+BE,IAA/B,CAAoC,IAApC,CAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAGV,KAAK,IAAI;AAC5B,QAAI,KAAKW,KAAL,CAAWC,QAAf,EAAyB;AACvB,WAAKD,KAAL,CAAWC,QAAX,CAAoBR,SAAS,CAACJ,KAAD,CAA7B;AACD;;AACDC,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GALD;;AAOA,QAAMa,MAAM,GAAGxB,OAAO,CAAC,MAAMM,WAAW,CAACD,SAAS,CAACJ,YAAY,EAAb,CAAV,CAAlB,EAA+C,EAA/C,CAAtB;AACA,SACE,MAAC,KAAD;AACE,IAAA,MAAM,EAAEuB,MADV;AAEE,IAAA,KAAK,EAAEb,KAFT;AAGE,IAAA,QAAQ,EAAEA,KAAK,IAAIU,YAAY,CAACV,KAAD,CAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,cAAD;AAAgB,IAAA,WAAW,EAAED,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAhCD;;AAkCA,MAAMe,YAAY,GAAG,CACnB;AACEZ,EAAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD;AADZ,CADmB,CAArB;AAMA,eAAeL,cAAf","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport { createEditor, Node } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport styled from \"styled-components\";\n\nconst StyledEditable = styled(Editable)`\n  border: 1px solid #ccc;\n  margin-top: 30px;\n  padding: 12px 8px;\n  &:placeholder {\n    color: #757575;\n    opacity: 1 !important;\n  }\n`;\n\nconst RichTextEditor = ({ placeholder }) => {\n  const [value, setValue] = useState([\n    {\n      children: [\n        {\n          text: \"\"\n        }\n      ]\n    }\n  ]);\n\n  const serialize = nodes => {\n    return nodes.map(n => Node.string(n)).join(\"\\n\");\n  };\n\n  const handleChange = value => {\n    if (this.props.onChange) {\n      this.props.onChange(serialize(value));\n    }\n    setValue(value);\n  };\n\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={value => handleChange(value)}\n    >\n      <StyledEditable placeholder={placeholder} />\n    </Slate>\n  );\n};\n\nconst initialValue = [\n  {\n    children: [{ text: \"This is editable plain text, just like a <textarea>!\" }]\n  }\n];\n\nexport default RichTextEditor;\n"]},"metadata":{},"sourceType":"module"}