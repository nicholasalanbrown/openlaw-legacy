{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CommitToBranch(\\n    $proposalId: String!\\n    $branchName: String!\\n    $title: String!\\n    $description: String!\\n    $summary: String!\\n    $legal: String!\\n    $message: String!\\n  ) {\\n    createProposal(\\n        proposalId: $proposalId\\n        branchName: $branchName\\n        title: $title\\n        description: $description\\n        summary: $summary\\n        legal: $legal\\n        message: $message\\n    ) {\\n      id\\n      title\\n      branchName\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nvar COMMIT_TO_BRANCH_MUTATION = gql(_templateObject());\nexport default COMMIT_TO_BRANCH_MUTATION;","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/mutations/commitToBranch.mutation.js"],"names":["gql","COMMIT_TO_BRANCH_MUTATION"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AAEA,IAAMC,yBAAyB,GAAGD,GAAH,mBAA/B;AA2BA,eAAeC,yBAAf","sourcesContent":["import gql from 'graphql-tag';\n\nconst COMMIT_TO_BRANCH_MUTATION = gql`\n  mutation CommitToBranch(\n    $proposalId: String!\n    $branchName: String!\n    $title: String!\n    $description: String!\n    $summary: String!\n    $legal: String!\n    $message: String!\n  ) {\n    createProposal(\n        proposalId: $proposalId\n        branchName: $branchName\n        title: $title\n        description: $description\n        summary: $summary\n        legal: $legal\n        message: $message\n    ) {\n      id\n      title\n      branchName\n      message\n    }\n  }\n`;\n\nexport default COMMIT_TO_BRANCH_MUTATION;\n"]},"metadata":{},"sourceType":"module"}