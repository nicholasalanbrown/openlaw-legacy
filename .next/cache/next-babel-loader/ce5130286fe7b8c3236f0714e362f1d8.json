{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/nicholasbrown/Source/openlaw/lib/user.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport fetch from \"isomorphic-unfetch\"; // Use a global to save the user, so we don't have to fetch it again after page navigations\n\nvar userState;\nvar User = React.createContext({\n  user: null,\n  loading: false\n});\nexport var fetchUser = function fetchUser() {\n  var res;\n  return _regeneratorRuntime.async(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(userState !== undefined)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", userState);\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(\"/api/me\"));\n\n        case 4:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 8:\n          _context.t0 = _context.sent;\n          _context.next = 12;\n          break;\n\n        case 11:\n          _context.t0 = null;\n\n        case 12:\n          userState = _context.t0;\n          return _context.abrupt(\"return\", userState);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var UserProvider = function UserProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n  var user = value.user; // If the user was fetched in SSR add it to userState so we don't fetch it again\n\n  React.useEffect(function () {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n  return __jsx(User.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, children);\n};\nexport var useUser = function useUser() {\n  return React.useContext(User);\n};\nexport var useFetchUser = function useFetchUser() {\n  var _React$useState = React.useState({\n    user: userState || null,\n    loading: userState === undefined\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setUser = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (userState !== undefined) {\n      return;\n    }\n\n    var isMounted = true;\n    fetchUser().then(function (user) {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({\n          user: user,\n          loading: false\n        });\n      }\n    });\n    return function () {\n      isMounted = false;\n    };\n  }, [userState]);\n  return data;\n};","map":{"version":3,"sources":["/Users/nicholasbrown/Source/openlaw/lib/user.js"],"names":["React","fetch","userState","User","createContext","user","loading","fetchUser","undefined","res","ok","json","UserProvider","value","children","useEffect","useUser","useContext","useFetchUser","useState","data","setUser","isMounted","then"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAIC,SAAJ;AAEA,IAAMC,IAAI,GAAGH,KAAK,CAACI,aAAN,CAAoB;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,OAAO,EAAE;AAAvB,CAApB,CAAb;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACnBL,SAAS,KAAKM,SADK;AAAA;AAAA;AAAA;;AAAA,2CAEdN,SAFc;;AAAA;AAAA;AAAA,2CAKLD,KAAK,CAAC,SAAD,CALA;;AAAA;AAKjBQ,UAAAA,GALiB;;AAAA,eAMXA,GAAG,CAACC,EANO;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMID,GAAG,CAACE,IAAJ,EANJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAMiB,IANjB;;AAAA;AAMvBT,UAAAA,SANuB;AAAA,2CAOhBA,SAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAUP,OAAO,IAAMU,YAAY,GAAG,SAAfA,YAAe,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAAA,MAC3CT,IAD2C,GAClCQ,KADkC,CAC3CR,IAD2C,EAGnD;;AACAL,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACb,SAAD,IAAcG,IAAlB,EAAwB;AACtBH,MAAAA,SAAS,GAAGG,IAAZ;AACD;AACF,GAJD,EAIG,EAJH;AAMA,SAAO,MAAC,IAAD,CAAM,QAAN;AAAe,IAAA,KAAK,EAAEQ,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BC,QAA9B,CAAP;AACD,CAXM;AAaP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAMhB,KAAK,CAACiB,UAAN,CAAiBd,IAAjB,CAAN;AAAA,CAAhB;AAEP,OAAO,IAAMe,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,wBACRlB,KAAK,CAACmB,QAAN,CAAe;AACrCd,IAAAA,IAAI,EAAEH,SAAS,IAAI,IADkB;AAErCI,IAAAA,OAAO,EAAEJ,SAAS,KAAKM;AAFc,GAAf,CADQ;AAAA;AAAA,MACzBY,IADyB;AAAA,MACnBC,OADmB;;AAMhCrB,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AACpB,QAAIb,SAAS,KAAKM,SAAlB,EAA6B;AAC3B;AACD;;AAED,QAAIc,SAAS,GAAG,IAAhB;AAEAf,IAAAA,SAAS,GAAGgB,IAAZ,CAAiB,UAAAlB,IAAI,EAAI;AACvB;AACA,UAAIiB,SAAJ,EAAe;AACbD,QAAAA,OAAO,CAAC;AAAEhB,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,OAAO,EAAE;AAAjB,SAAD,CAAP;AACD;AACF,KALD;AAOA,WAAO,YAAM;AACXgB,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAjBD,EAiBG,CAACpB,SAAD,CAjBH;AAmBA,SAAOkB,IAAP;AACD,CA1BM","sourcesContent":["import React from \"react\";\nimport fetch from \"isomorphic-unfetch\";\n\n// Use a global to save the user, so we don't have to fetch it again after page navigations\nlet userState;\n\nconst User = React.createContext({ user: null, loading: false });\n\nexport const fetchUser = async () => {\n  if (userState !== undefined) {\n    return userState;\n  }\n\n  const res = await fetch(\"/api/me\");\n  userState = res.ok ? await res.json() : null;\n  return userState;\n};\n\nexport const UserProvider = ({ value, children }) => {\n  const { user } = value;\n\n  // If the user was fetched in SSR add it to userState so we don't fetch it again\n  React.useEffect(() => {\n    if (!userState && user) {\n      userState = user;\n    }\n  }, []);\n\n  return <User.Provider value={value}>{children}</User.Provider>;\n};\n\nexport const useUser = () => React.useContext(User);\n\nexport const useFetchUser = () => {\n  const [data, setUser] = React.useState({\n    user: userState || null,\n    loading: userState === undefined\n  });\n\n  React.useEffect(() => {\n    if (userState !== undefined) {\n      return;\n    }\n\n    let isMounted = true;\n\n    fetchUser().then(user => {\n      // Only set the user if the component is still mounted\n      if (isMounted) {\n        setUser({ user, loading: false });\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [userState]);\n\n  return data;\n};\n"]},"metadata":{},"sourceType":"module"}