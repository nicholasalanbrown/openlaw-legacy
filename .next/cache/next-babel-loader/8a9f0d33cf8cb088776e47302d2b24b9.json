{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport fetch from \"isomorphic-unfetch\";\nexport var getProposals = function getProposals() {\n  var res;\n  return _regeneratorRuntime.async(function getProposals$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects\")).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 2:\n          res = _context.sent;\n          return _context.abrupt(\"return\", res);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var getProposalMetadata = function getProposalMetadata(gitlabProjectId) {\n  var refName,\n      res,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function getProposalMetadata$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          refName = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : \"master\";\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/metadata%2Ejson/raw?ref=\").concat(refName)).then(function (response) {\n            return response.json();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context2.sent;\n          return _context2.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\nexport var getProposalSummary = function getProposalSummary(gitlabProjectId) {\n  var refName,\n      res,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getProposalSummary$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          refName = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : \"master\";\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/summary%2Emd/raw?ref=\").concat(refName)).then(function (response) {\n            return response.text();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context3.sent;\n          return _context3.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};\nexport var getProposalLegal = function getProposalLegal(gitlabProjectId) {\n  var refName,\n      res,\n      _args4 = arguments;\n  return _regeneratorRuntime.async(function getProposalLegal$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          refName = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : \"master\";\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(process.env.GITLAB_BASE_URL, \"/projects/\").concat(gitlabProjectId, \"/repository/files/legal%2Emd/raw?ref=\").concat(refName)).then(function (response) {\n            return response.text();\n          }).then(function (data) {\n            return data;\n          }));\n\n        case 3:\n          res = _context4.sent;\n          return _context4.abrupt(\"return\", res);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}